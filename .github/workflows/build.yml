name: CI Build

on:
  push:
    branches: [ "master" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows artifacts
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build
        shell: pwsh
        run: |
          $msbuildPath = Split-Path (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.Component.MSBuild -find MSBuild\Current\Bin\amd64\MSBuild.exe | Select-Object -First 1) -Parent
          $env:PATH = "$msbuildPath;$env:PATH"

          dotnet build -c Release -f net48 de4dot.netframework.sln
          Remove-Item Release\net48\*.pdb, Release\net48\*.xml, Release\net48\Test.Rename.*

          dotnet publish -c Release -f net8.0 -o publish-net8.0 de4dot
          Remove-Item publish-net8.0\*.pdb, publish-net8.0\*.xml

      - uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        with:
          name: de4dotEx-net48
          path: Release/net48

      - uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        with:
          name: de4dotEx-net8.0-win-x64
          path: publish-net8.0

  build-linux:
    name: Build Linux artifacts & package .deb
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish net8.0
        run: |
          dotnet publish -c Release -f net8.0 -o publish-net8.0 de4dot
          rm -rf publish-net8.0/*.pdb publish-net8.0/*.xml

      - name: Upload publish folder
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: de4dotEx-net8.0-linux-x64
          path: publish-net8.0

      - name: Extract version from Git tag
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create .deb package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p deb-root/opt/de4dotEx
          cp -r publish-net8.0/* deb-root/opt/de4dotEx/

          mkdir -p deb-root/usr/local/bin
          ln -s /opt/de4dotEx/de4dot deb-root/usr/local/bin/de4dot

          mkdir -p deb-root/DEBIAN
          cat <<EOF > deb-root/DEBIAN/control
          Package: de4dotEx
          Version: ${{ steps.get_version.outputs.VERSION }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: G DATA Advanced Analytics GmbH <mwa@gdata-adan.de>
          Depends: libicu77 | libicu76 | libicu74 | libicu72 | libicu70 | libicu67 | libicu66
          Description: .NET deobfuscator and unpacker
           de4dot is a .NET deobfuscator and unpacker. It will try its best to
           restore a packed and obfuscated assembly to almost the original
           assembly.
           .
           Most of the obfuscation can be completely restored (e.g., string
           encryption), but symbol renaming is impossible to restore since the
           original names aren't (usually) part of the obfuscated assembly.
          EOF

          dpkg-deb --build deb-root de4dotEx-${{ steps.get_version.outputs.VERSION }}.deb

      - uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: de4dotEx-${{ steps.get_version.outputs.VERSION }}-net8.0-x64-deb
          path: de4dotEx-${{ steps.get_version.outputs.VERSION }}.deb
